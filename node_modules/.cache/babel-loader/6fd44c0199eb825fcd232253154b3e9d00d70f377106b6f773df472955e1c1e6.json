{"ast":null,"code":"export const sortArrayByField = (arr, field, sortOrder) => {\n  const sortedArray = [...arr];\n  sortedArray.sort((a, b) => {\n    const valueA = a[field];\n    const valueB = b[field];\n    if (typeof valueA === 'number' && typeof valueB === 'number') {\n      if (sortOrder === 'ascending') {\n        return valueA - valueB;\n      } else {\n        return valueB - valueA;\n      }\n    }\n    return 0;\n  });\n  return sortedArray;\n};","map":{"version":3,"names":["sortArrayByField","arr","field","sortOrder","sortedArray","sort","a","b","valueA","valueB"],"sources":["/Applications/work/test_tasks/coding-challenge-consumer-semen/src/utils/sort-array-by-field.ts"],"sourcesContent":["import { SortOrder } from './common/sort-order';\n\nexport const sortArrayByField = <T>(arr: T[], field: keyof T, sortOrder: SortOrder): T[] => {\n  const sortedArray = [...arr];\n\n  sortedArray.sort((a, b) => {\n    const valueA = a[field];\n    const valueB = b[field];\n\n    if (typeof valueA === 'number' && typeof valueB === 'number') {\n      if (sortOrder === 'ascending') {\n        return valueA - valueB;\n      } else {\n        return valueB - valueA;\n      }\n    }\n\n    return 0;\n  });\n\n  return sortedArray;\n};\n"],"mappings":"AAEA,OAAO,MAAMA,gBAAgB,GAAGA,CAAIC,GAAQ,EAAEC,KAAc,EAAEC,SAAoB,KAAU;EAC1F,MAAMC,WAAW,GAAG,CAAC,GAAGH,GAAG,CAAC;EAE5BG,WAAW,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACzB,MAAMC,MAAM,GAAGF,CAAC,CAACJ,KAAK,CAAC;IACvB,MAAMO,MAAM,GAAGF,CAAC,CAACL,KAAK,CAAC;IAEvB,IAAI,OAAOM,MAAM,KAAK,QAAQ,IAAI,OAAOC,MAAM,KAAK,QAAQ,EAAE;MAC5D,IAAIN,SAAS,KAAK,WAAW,EAAE;QAC7B,OAAOK,MAAM,GAAGC,MAAM;MACxB,CAAC,MAAM;QACL,OAAOA,MAAM,GAAGD,MAAM;MACxB;IACF;IAEA,OAAO,CAAC;EACV,CAAC,CAAC;EAEF,OAAOJ,WAAW;AACpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}